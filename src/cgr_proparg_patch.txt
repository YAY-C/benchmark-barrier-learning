--- /home/xe/SOFT/miniconda3/envs/chemprop-161/lib/python3.10/site-packages/chemprop/rdkit.py	2024-01-22 14:34:43.468248258 +0100
+++ /home/xe/SOFT/miniconda3/envs/chemprop-161-patched/lib/python3.10/site-packages/chemprop/rdkit.py	2024-01-22 14:37:13.866498899 +0100
@@ -15,17 +15,29 @@
     params.removeHs = not keep_h
     mol = Chem.MolFromSmiles(s, params)
 
-    if add_h:
-        mol = Chem.AddHs(mol)
+    if mol is not None:
+
+        if add_h:
+            mol = Chem.AddHs(mol)
+
+        if keep_atom_map and mol is not None:
+            atom_map_numbers = tuple(atom.GetAtomMapNum() for atom in mol.GetAtoms())
+            for idx, map_num in enumerate(atom_map_numbers):
+                if idx + 1 != map_num:
+                    new_order = np.argsort(atom_map_numbers).tolist()
+                    return Chem.rdmolops.RenumberAtoms(mol, new_order)
+        elif not keep_atom_map and mol is not None:
+            for atom in mol.GetAtoms():
+                atom.SetAtomMapNum(0)
+
+    else:
+        mol = Chem.MolFromSmiles(s, sanitize=False)
+        Chem.SanitizeMol(mol, Chem.SanitizeFlags.SANITIZE_ALL ^ Chem.SanitizeFlags.SANITIZE_PROPERTIES)
+        if not keep_h:
+            mol = Chem.RemoveHs(mol, sanitize=False)
+            Chem.SanitizeMol(mol, sanitizeOps=Chem.SanitizeFlags.SANITIZE_ALL ^ Chem.SanitizeFlags.SANITIZE_PROPERTIES)
 
-    if keep_atom_map and mol is not None:
-        atom_map_numbers = tuple(atom.GetAtomMapNum() for atom in mol.GetAtoms())
-        for idx, map_num in enumerate(atom_map_numbers):
-            if idx + 1 != map_num:
-                new_order = np.argsort(atom_map_numbers).tolist()
-                return Chem.rdmolops.RenumberAtoms(mol, new_order)
-    elif not keep_atom_map and mol is not None:
-        for atom in mol.GetAtoms():
-            atom.SetAtomMapNum(0)
+        if add_h:
+            mol = Chem.AddHs(mol)
 
     return mol
